<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArrowHintText" xml:space="preserve">
    <value>Draw figures for get arrow</value>
    <comment>minigame</comment>
  </data>
  <data name="BadLuckHint" xml:space="preserve">
    <value>You have bad luck...</value>
    <comment>hint</comment>
  </data>
  <data name="BatHint" xml:space="preserve">
    <value>Bat in </value>
    <comment>hint</comment>
  </data>
  <data name="BatWarning" xml:space="preserve">
    <value>Bats Nearby({0})</value>
  </data>
  <data name="BuyArrowsString" xml:space="preserve">
    <value>Buy Arrows</value>
    <comment>interface</comment>
  </data>
  <data name="BuyHintString" xml:space="preserve">
    <value>Buy Hint</value>
    <comment>interface</comment>
  </data>
  <data name="CoinsLog" xml:space="preserve">
    <value>+ {0} coins</value>
  </data>
  <data name="ControlLog" xml:space="preserve">
    <value>Left mouse button for#moving#Right mouse button for#shot arrow</value>
  </data>
  <data name="CountArrowString" xml:space="preserve">
    <value>Arrows {0}</value>
    <comment>interface</comment>
  </data>
  <data name="CountCoinsString" xml:space="preserve">
    <value>Coins {0}</value>
    <comment>interface</comment>
  </data>
  <data name="DebugScore" xml:space="preserve">
    <value>Ps! before call, check active != null</value>
  </data>
  <data name="Diff1String" xml:space="preserve">
    <value>Easy</value>
  </data>
  <data name="Diff2String" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="Diff3String" xml:space="preserve">
    <value>Hard</value>
  </data>
  <data name="DodgerAchiv" xml:space="preserve">
    <value>Dodger.png/DODGER#Don't use MiniGame</value>
  </data>
  <data name="EnterName" xml:space="preserve">
    <value>Enter your name</value>
    <comment>score</comment>
  </data>
  <data name="EnterSeed1" xml:space="preserve">
    <value>Pick a cave or enter</value>
    <comment>pickCave</comment>
  </data>
  <data name="EnterSeed2" xml:space="preserve">
    <value>your seed</value>
    <comment>pickCave</comment>
  </data>
  <data name="ExplorerAchiv" xml:space="preserve">
    <value>explorer.png/EXPLORER#Enter all rooms of the cave</value>
  </data>
  <data name="FasterAchiv" xml:space="preserve">
    <value>"MG1.png/SPEEDY#Finish 1 lvl mini-game in less#than 7 seconds</value>
  </data>
  <data name="GiveArrowsString" xml:space="preserve">
    <value>You received 2 arrows</value>
    <comment>log</comment>
  </data>
  <data name="HamiltonAchiv" xml:space="preserve">
    <value>Hamilton.png/HAMILTON'S DESCRENDANT#Go through all the rooms visiting#each 1 time only</value>
  </data>
  <data name="HintHintText" xml:space="preserve">
    <value>Draw figures for get hint!</value>
    <comment>minigame</comment>
  </data>
  <data name="HintRightClick" xml:space="preserve">
    <value>#Right click to shoot#arrow</value>
    <comment>log</comment>
  </data>
  <data name="HunterAchiv" xml:space="preserve">
    <value>Hunter.png/HUNTER#Buy 4 arrows</value>
  </data>
  <data name="Leader" xml:space="preserve">
    <value>Leaders</value>
    <comment>score</comment>
  </data>
  <data name="LoseString" xml:space="preserve">
    <value>Defeat</value>
    <comment>score</comment>
  </data>
  <data name="MapSeedString" xml:space="preserve">
    <value>Map's seed is {0}</value>
    <comment>log</comment>
  </data>
  <data name="MetBatString" xml:space="preserve">
    <value>You met BAT</value>
    <comment>log</comment>
  </data>
  <data name="NewAchievement" xml:space="preserve">
    <value>New achievement!</value>
    <comment>score achiv</comment>
  </data>
  <data name="NotEnoughCoins" xml:space="preserve">
    <value>Not enough coins(need {0} more)</value>
    <comment>log</comment>
  </data>
  <data name="NowRoomString" xml:space="preserve">
    <value>Room {0}</value>
    <comment>interface</comment>
  </data>
  <data name="PitHint" xml:space="preserve">
    <value>Pit in </value>
    <comment>hint</comment>
  </data>
  <data name="PitHintText" xml:space="preserve">
    <value>Pit! Draw figures for survive!</value>
    <comment>minigame</comment>
  </data>
  <data name="PitWarning" xml:space="preserve">
    <value>I feel a draft({0})</value>
  </data>
  <data name="PlayButtonText" xml:space="preserve">
    <value>PLAY!</value>
    <comment>pickcave</comment>
  </data>
  <data name="PreciseAchiv" xml:space="preserve">
    <value>Precise.png/PRECISE#Score 500 point in the mini-game on#the 1 lvl by drawing </value>
  </data>
  <data name="Reactivity" xml:space="preserve">
    <value>MG2.png/REACTIVE#Finish 2 lvl mini-game in#less than 7 seconds</value>
  </data>
  <data name="RobinAchiv" xml:space="preserve">
    <value>Robin.png/ROBIN HOOD#Buy 8 arrows</value>
  </data>
  <data name="SharpeyeAchiv" xml:space="preserve">
    <value>Sharpeye.png/SHARPEYE#Score 500 point in the mini-game on#the 2 lvl by drawing only 1 figure</value>
  </data>
  <data name="ShooterAchiv" xml:space="preserve">
    <value>Shooter.png/SHOOTER#Buy 2 arrows</value>
  </data>
  <data name="SniperAchiv" xml:space="preserve">
    <value>Sniper.png/SNIPER#Score 500 point in the mini-game on#the 3 lvl by drawing only 1 figure</value>
  </data>
  <data name="StepAchiv" xml:space="preserve">
    <value>Step.png/STEP INTO ABYSS#Explore 12 rooms</value>
  </data>
  <data name="WinString" xml:space="preserve">
    <value>Victory</value>
    <comment>score</comment>
  </data>
  <data name="WumpusHint" xml:space="preserve">
    <value>Wumpus in </value>
    <comment>hint</comment>
  </data>
  <data name="WumpusHintText" xml:space="preserve">
    <value>Wumpus! Draw figures for survive</value>
    <comment>minigame</comment>
  </data>
  <data name="WumpusRunString" xml:space="preserve">
    <value>Wumpus run away</value>
    <comment>log</comment>
  </data>
  <data name="WumpusWarning" xml:space="preserve">
    <value>I smell a Wumpus!({0})</value>
  </data>
  <data name="YourScore" xml:space="preserve">
    <value>Your score {0}</value>
    <comment>score</comment>
  </data>
  <data name="ZingerAchiv" xml:space="preserve">
    <value>MG3.png/ZINGER#Finish 3 lvl mini-game in less#than 7 seconds</value>
  </data>
</root>